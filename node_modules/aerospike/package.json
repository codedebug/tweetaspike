{
  "name": "aerospike",
  "version": "1.0.35",
  "description": "Aerospike Client Library",
  "tags": [
    "aerospike",
    "database",
    "nosql"
  ],
  "homepage": "https://github.com/aerospike/aerospike-client-nodejs",
  "main": "lib/aerospike",
  "engines": {
    "node": ">=0.10 <0.12"
  },
  "os": [
    "linux",
    "darwin"
  ],
  "cpu": [
    "x64"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/aerospike/aerospike-client-nodejs"
  },
  "scripts": {
    "test": "node_modules/mocha/bin/mocha -R spec",
    "install": "node-gyp rebuild"
  },
  "devDependencies": {
    "mocha": ">0",
    "expect.js": "0.2.x",
    "superagent": "0.15.x",
    "yargs": "1.2.1"
  },
  "gypfile": true,
  "readme": "# Aerospike Node.js Client\n\nAn Aerospike add-on module for Node.js.\n\nThis module is compatible with Node.js 0.10.x and supports the following operating systems: CentOS/RHEL 6.x, Debian 6+, Ubuntu 12.04, Ubuntu 14.04, Mac OS X.\n\n- [Usage](#Usage)\n- [Prerequisites](#Prerequisites)\n- [Installation](#Installation)\n  - [Primer on Node.js Modules](#Primer-on-Node.js-Modules)\n  - [Installing via NPM Registry](#Installing-via-NPM-Registry)\n  - [Installing via Git Repository](#Installing-via-Git-Repository)\n  - [C Client Resolution](#C-Client-Resolution)\n    - [Force Download](#Force-Download)\n    - [Custom Search Path](#Custom-Search-Path)\n- [Tests](#Tests)\n- [Examples](#Examples)\n- [Benchmarks](#Benchmarks)\n- [API Documentaion](#API-Documentation)\n\n<a name=\"Usage\"></a>\n## Usage\n\nThe following is very simple example of how to write and read a record from Aerospike. \n\n```js\nvar aerospike = require('aerospike');\nvar status = aerospike.status;\n\n\n// Connect to the cluster.\nvar client = aerospike.client({\n    hosts: [ { addr: '127.0.0.1', port: 3000 } ]\n});\n\nfunction connect_cb( err, client) {\n    if (err.code == status.AEROSPIKE_OK) {\n        console.log(\"Aerospike Connection Success\")\n    }\n}\n\nclient.connect(connect_cb)\n\n// The key of the record we are reading.\nvar key = aerospike.key('test','demo','foo');\n\n// Read the record from the database\nclient.get(key, function(err, rec, meta) {\n    \n    // Check for errors\n    if ( err.code == status.AEROSPIKE_OK ) {\n    \t// The record was successfully read.\n    \tconsole.log(rec, meta);\n    }\n    else {\n        // An error occurred\n        console.error('error:', err);\n    }\n});\n```\n\nMore examples illustrating the use of the API are located in the \n[`examples`](examples) directory. \n\nDetails about the API are available in the [`docs`](docs) directory.\n\n<a name=\"Prerequisites\"></a>\n## Prerequisites\n\n[Node.js](http://nodejs.org) version v0.10.x is required. \n\nTo install the latest stable version of Node.js, visit \n[http://nodejs.org/download/](http://nodejs.org/download/)\n\nAerospike Node.js has a dependency on Aerospike C client, which is\ndownloaded during the installation.  To Download Aerospike C client, curl is required.\nThe client library requires the following libraries to be present on the machine for building and running.\n\n| Library Name | .rpm Package | Description |\n| --- | --- | --- |\n| libssl | openssl | |\n| libcrypto | openssl | Required for RIPEMD160 hash function. |\n| liblua5.1 | lua | Required for Lua execution, used in query aggregation. |\n\nNote: Lua is used for query aggregation. If the application is not using the aggregation feature, lua installation can be skipped.\n\n- CentOS/RHEL 6.x\n\nTo install library prerequisites via `yum`:\n\n```bash\nsudo yum install openssl-devel lua-devel\n```\n\nSome CentOS installation paths do not include necessary C development tools. You may need the following packages:\n\n```bash\nsudo yum install gcc gcc-c++\n```\n- Debian 6+\n\nTo install library prerequisites via `apt-get`:\n\n```bash\nsudo apt-get install libssl0.9.8 libssl-dev liblua5.1-dev\n```\n\nThe following symlinks need to be created for Aerospike's packaged examples to compile:\n\n```bash\nsudo ln -s /usr/lib/liblua5.1.so /usr/lib/liblua.so\nsudo ln -s /usr/lib/liblua5.1.a /usr/lib/liblua.a\n```\n- Ubuntu 12.04+\n\nTo install library prerequisites via `apt-get`:\n\n```bash\nsudo apt-get install libssl0.9.8 libssl-dev liblua5.1-dev\n```\n\nThe following symlinks need to be created for Aerospike's packaged examples to compile:\n\n```bash\nsudo ln -s /usr/lib/x86_64-linux-gnu/liblua5.1.so /usr/lib/liblua.so\nsudo ln -s /usr/lib/x86_64-linux-gnu/liblua5.1.a /usr/lib/liblua.a\n```\n\n- Mac OS X\n\nBefore starting with the Aerospike Nodejs Client, please make sure the following prerequisites are met:\n- Mac OS X 10.8 or greater.\n- Xcode 5 or greater.\n- Lua 5.1.5 library.  Required when running queries with user defined aggregations.  \n\n####Openssl library installation in Mac OS X.\n\n```bash\n$ brew install openssl\n$ brew link openssl --force\n```\n\n#####Lua Installation in Mac OS X\n\nLua is required for performing aggregations on results returned from the database. The following are instruction for installing Lua 5.1:\n\n```bash\n$ curl -O http://www.lua.org/ftp/lua-5.1.5.tar.gz\n$ tar xvf lua-5.1.5.tar.gz\n$ cd lua-5.1.5\n$ make macosx\n$ make test\n$ sudo make install\n```\n\n<a name=\"Installation\"></a>\n## Installation\n\nThe Aerospike Node.js client is a Node.js add-on module utilizing the Aerospike \nC client. The installation will attempt to build the add-on module prior to \ninstallation. The build step will resolve the Aerospike C client dependency as \ndescribed in [C Client Resolution](#C-Client-Resolution).\n\nThe Aerospike Node.js client can be installed like any other Node.js module, however\nwe provided the following information for those not so familiar with Node.js modules. \n\n<a name=\"Primer-on-Node.js-Modules\"></a>\n### Primer on Node.js Modules\n\nNode.js modules are containers of JavaScript code and a `package.json`, which defines\nthe module, its dependencies and requirements. Modules are usually installed as \ndependencies of others Node.js application or module. The modules are installed in \nthe application's `node_modules` directory, and can be utilized within the program \nby requiring the module by name. \n\nA module may be installed in global location via the `-g` flag. The global location\nis usually reserved for modules that are not directly depended on by an application,\nbut may have executables which you want to be able to call regardless of the \napplication. This is usually the case for tools like tools like `npm` and `mocha`.\n\nIf the application uses query aggregation feature, LUA library should be installed \nfollowing the instruction given in [Prerequisites](#Prerequisites). The last step \nin aggregation is executed in the client machine which  uses LUA. To install `aerospike`\nlibrary with LUA enabled, an environment variable `USELUA` must be set. For more details\n[Aerospike with Aggregation](#Aerospike with Aggregation)\n\n```bash\n$ export USELUA=1\n```\n\n<a name=\"Installing-via-NPM-Registry\"></a>\n### Installing via NPM Registry\n\nInstalling via NPM Registry is pretty simple and most common install method, as \nit only involves a single step.\n\nAlthough the module may be installed globally or locally, we recommend performing \nlocal installs.\n\nTo install the module as a dependency of your application, run the following \nfrom your application's directory:\n\n\t$ npm install aerospike\n\nIn most cases, an application should specify `aerospike` as a dependency in \nits `package.json`.\n\nOnce installed, the module can be required in the application:\n\n\tvar aerospike = require('aerospike')\n\n<a name=\"Installing-via-Git-Repository\"></a>\n### Installing via Git Repository\n\nThe following is relevant for users who have cloned the repository, and want \nto install it as a dependency of their application.\n\nInstalling via Git Repository is slightly different from installing via NPM \nregistry, in that you will be referencing the module by path, rather than name.\n\nAlthough the module may be installed globally or locally, we recommend performing \nlocal installs.\n\n#### Installing Globally\n\nThis option required root permissions. This will download the Aerospike C client\nonly once, which will improve the experience of using the module for many users. \nHowever, you will need to first install the package globally using root permissions.\n\nRun the following as a user with root permission or using the sudo command:\n\n\t$ npm install -g <PATH>\n\nWhere `<PATH>` is the path to the Aerospike Node.js client's Git respository is \nlocated. This will install the module in a globally accessible location.\n\nTo install the module as a dependency of your application, run the following \nfrom your application's directory:\n\n\t$ npm link aerospike\n\nLinking to the module does not require root permission.\n\nOnce linked, the module can be required in the application:\n\n\tvar aerospike = require('aerospike')\n\n#### Installing Locally\n\nThis option does not require root permissions to install the module as a \ndependency of an application. However, it will require resolving the Aerospike\nC client each time you install the dependency, as it will need to exist local\nto the application.\n\nTo install the module as a dependency of your application, run the following \nfrom your application's directory:\n\n\t$ npm install <PATH>\n\nWhere `<PATH>` is the path to the Aerospike Node.js client's Git respository is \nlocated. \n\nOnce installed, the module can be required in the application:\n\n\tvar aerospike = require('aerospike')\n\n<a name=\"Aerospike with Aggregation\">\n### Aerospike with Aggregation\nAerospike nodejs client does not include LUA by default during installation. Application can set \nan environment variable `USELUA` to inclue LUA library, and can use the Aggregation feature in \nAerospike. To install with Aggregation enabled:\n\t\n\t$USELUA=1 npm install\n\nIf application includes `aerospike` as a dependency in `package.json` the variable `USELUA`\ncan be exported as a environment variable as follows:\n\n\t$export USELUA=1\n\n<a name=\"C-Client-Resolution\"></a>\n### C Client Resolution\n\nWhen running `npm install`, `npm link` or `node-gyp rebuild`, the `.gyp`\nscript will run `scripts/aerospike-client-c.sh` to resolve the C client \ndependency.\n\nThe script will check for the following files in the search paths:\n\n- `lib/libaerospike.a`\n- `include/aerospike/aerospike.h`\n\nBy default, the search paths are:\n\n- `./aerospike-client-c`\n- `/usr`\n\nIf neither are found, then it will download the C client and create the \n`./aerospike-client-c` directory.\n\nYou can modify the C client resolution via:\n\n- [force download](#Force-Download) the C client\n- Specifying a [custom search path](#Custom-Search-Path) for the C client.\n\n<a name=\"Force-Download\"></a>\n#### Force Download\n\nTo force downloading of the C client, you can specify the `DOWNLOAD=1` \nenvironment variable. Example:\n\n    $ DOWNLOAD=1 npm install\n\n<a name=\"Custom-Search-Path\"></a>\n#### Custom Search Path \n\nIf you have the Aerospike C client installed in a non-standard location or \nbuilt from source, then you can specify the search path for the build step to\nuse while resolving the Aerospike C client library.\n\nUse the `PREFIX=<PATH>` environment variable to specify the search path for the\nAerospike C client. The `<PATH>` must be the path to a directory containing \n`lib` and `include` subdirectories. \n\nThe following is an example of specifying the path to the Aerospike C client \nbuild directory:\n\n    $ export PREFIX=~/aerospike-client-c/target/Linux-x86_64 \n\nWhen Aerospike C Client is resolved through the environment variable PREFIX,\nthe location to lua files that comes with C client installation must also be specified.\nSpecifying lua file location is done using environment variable `AEROSPIKE_LUA_PATH=<PATH>`. \nThe `<PATH>` must be a path to a directory containing files `aerospike.lua` and `as.lua`.\n\nThe following is an example of specifying `AEROSPIKE_LUA_PATH` and then installing.\n\n\t$ export AEROSPIKE_LUA_PATH=/opt/aerospike/sys/udf/lua/\n\t$ npm install\n\n<a name=\"Tests\"></a>\n## Tests\n\nThis module is packaged with a number of tests in the `test` directory.\n\nBefore running the tests, you need to update the dependencies:\n\n    $ npm update\n\nTo run all the test cases:\n\n    $ npm test\n\nFor details on the tests, see [`test/README.md`](test/README.md).\n\n\n<a name=\"Examples\"></a>\n## Examples\n\nA variety of example applications are provided in the [`examples`](examples) directory. \nSee the [`examples/README.md`](examples/README.md) for details.\n\n<a name=\"Benchmarks\"></a>\n## Benchmarks\n\nBenchmark utilies are provided in the [`benchmarks`](benchmarks) directory. \nSee the [`benchmarks/README.md`](benchmarks/README.md) for details.\n\n<a name=\"API-Documentation\"></a>\n## API Documentation\n\nAPI documentation is provided in the [`docs`](docs/README.md) directory.\n\n## License\n\nThe Aerospike Node.js Client is made availabled under the terms of the Apache License, Version 2, as stated in the file `LICENSE`.\n\nIndividual files may be made available under their own specific license, \nall compatible with Apache License, Version 2. Please see individual files for details.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/aerospike/aerospike-client-nodejs/issues"
  },
  "_id": "aerospike@1.0.35",
  "dist": {
    "shasum": "613a9c49a1cdb561c7e83e805c5647d615e8a52a"
  },
  "_from": "aerospike@1.0.35",
  "_resolved": "https://registry.npmjs.org/aerospike/-/aerospike-1.0.35.tgz"
}
